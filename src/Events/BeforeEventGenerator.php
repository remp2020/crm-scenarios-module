<?php
declare(strict_types=1);

namespace Crm\ScenariosModule\Events;

use Crm\ApplicationModule\Models\Event\BeforeEvent;
use Crm\ApplicationModule\Models\Event\EventGeneratorInterface;
use Crm\ApplicationModule\Models\Event\EventsStorage;
use Crm\ScenariosModule\Engine\Dispatcher;
use Crm\ScenariosModule\Repositories\GeneratedEventsRepository;
use Crm\ScenariosModule\Repositories\JobsRepository;
use Crm\ScenariosModule\Repositories\TriggersRepository;
use DateInterval;
use Nette\Utils\Json;

class BeforeEventGenerator
{
    public function __construct(
        private readonly EventsStorage $eventsStorage,
        private readonly TriggersRepository $triggersRepository,
        private readonly GeneratedEventsRepository $generatedEventsRepository,
        private readonly Dispatcher $dispatcher,
    ) {
    }

    /**
     * @return array<string, array<int, BeforeEvent[]>> Returns array with events generated by triggers.
     *
     * Format of returned array:
     *   [
     *     'before_event_code_1' => [
     *       'time_offset_in_minutes' => [BeforeEvent, BeforeEvent, BeforeEvent],
     *       'time_offset_in_minutes' => [BeforeEvent, BeforeEvent, BeforeEvent],
     *     'before_event_code_2' => [
     *       'time_offset_in_minutes' => [BeforeEvent, BeforeEvent, BeforeEvent],
     *   ]
     *
     */
    public function generate(): array
    {
        $result = [];

        $triggersSelection = $this->triggersRepository->findByType(TriggersRepository::TRIGGER_TYPE_BEFORE_EVENT);
        foreach ($triggersSelection as $triggerRow) {
            if (!$triggerRow->scenario->enabled) {
                continue;
            }

            /** @var EventGeneratorInterface $eventsGenerator */
            foreach ($this->eventsStorage->getEventGenerators() as $code => $eventsGenerator) {
                if ($triggerRow->event_code !== $code) {
                    continue;
                }

                $options = Json::decode(json: $triggerRow->options, forceArrays: true);
                $minutes = $options['minutes'];
                $timeOffset = new DateInterval("PT{$minutes}M");

                $events = $eventsGenerator->generate($timeOffset);

                foreach ($events as $event) {
                    if ($this->generatedEventsRepository->exists($triggerRow->id, $code, $event->getId()) === false) {
                        $this->generatedEventsRepository->add($triggerRow->id, $code, $event->getId());

                        $this->dispatcher->dispatchTrigger($triggerRow, $event->getUserId(), $event->getParameters(), [
                            JobsRepository::CONTEXT_BEFORE_EVENT => $code,
                        ]);

                        $result[$code][$minutes][] = $event;
                    }
                }
            }
        }

        return $result;
    }
}
